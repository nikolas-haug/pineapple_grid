//=====================================================
// CONTAINERS
//=====================================================

// (Media query ~ breakpoints)
// 0 - 600px        :     Phone
// 600 - 900px      :     Tablet portrait
// 900 - 1200px     :     Tablet landscape
// 1200 - 1800px    :     ~ Desktop
// 1800px +         :     Large desktop

// Convert to em for accessible media queries (px / 16)

$x-small: 480px;
$small: 850px;
$medium: 992px;
$large: 1200px;

// Sets the width of the containers
$container-gutter: 0.95;

//=====================================================
// GRID
//=====================================================

// Controls the number of columns for the layout
$grid-columns: 12;

// General variable for all containers, rows, and columns
$grid-padding: 1.5rem;

// Custom col padding
$grid-column-padding-custom: 0.5rem;

// Gallery row fixed height
$row-gallery-height: 20rem;

//=====================================================
// MIXINS
//=====================================================

/** 
*
* Media queries for a mobile first layout
*
*/

@mixin x-small-breakpoint {
    @media only screen and (min-width: #{$x-small}) {
        @content;
    }
}

@mixin small-breakpoint {
    @media only screen and (min-width: #{$small}) {
        @content;
    }
}

@mixin medium-breakpoint {
    @media only screen and (min-width: #{$medium}) {
        @content;
    }
}

@mixin large-breakpoint {
    @media only screen and (min-width: #{$large}) {
        @content;
    }
}

@mixin container-size($size, $gutter) {
    max-width: calc(#{$size} * #{$gutter});
}

@mixin container-styles {
    width: 100%;
    padding-right: $grid-padding;
    padding-left: $grid-padding;
    margin-right: auto;
    margin-left: auto;
}

@mixin row-cols($count) {
    & > * {
        flex: 0 0 100% / $count;
        max-width: 100% / $count;
    }
}

//=====================================================
// LAYOUT
//=====================================================

// CONTAINERS

.container {
    @include container-styles;
}

.container-stretch {
    @include container-styles;
}

// FIXED SIZE CONTAINERS

.container-sm {
    @include container-size($x-small, $container-gutter);
    @include container-styles;
}

.container-med {
    @include container-size($small, $container-gutter);
    @include container-styles;
}

.container-lg {
    @include container-size($medium, $container-gutter);
    @include container-styles;
}

// MAIN CONTAINER BREAKPOINTS

@include x-small-breakpoint {
    .container {
        @include container-size($x-small, $container-gutter);
    }
}

@include small-breakpoint {
    .container {
        @include container-size($small, $container-gutter);
    }
}

@include medium-breakpoint {
    .container {
        @include container-size($medium, $container-gutter);
    }
}

@include large-breakpoint {
    .container {
        @include container-size($large, $container-gutter);
    }
}

// ROWS

.row {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-right: -#{$grid-padding};
    margin-left: -#{$grid-padding};
}

// Gallery Rows
.row-gallery {
    max-height: $row-gallery-height;
    overflow: hidden;
}

%col-styles {
    position: relative;
    width: 100%;
    padding-right: $grid-padding;
    padding-left: $grid-padding;
}

@mixin col-x-list {
    @for $i from 1 through $grid-columns {
        .col-#{$i},
        .col-sm-#{$i},
        .col-med-#{$i},
        .col-lg-#{$i},
        .col,
        .col-sm,
        .col-med,
        .col-lg {
            @extend %col-styles;
        }
    }
}

@include col-x-list;

// Row Columns
[class*="row-cols-"] > * {
    flex: 0 0 100%;
    max-width: 100%;
}

.no-gutters {
    margin-right: 0;
    margin-left: 0;
}

.no-gutters > .col,
.no-gutters > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
}

// Custom Row Spacing
.row-custom {
    margin-right: -#{$grid-column-padding-custom};
    margin-left: -#{$grid-column-padding-custom};
}

.row-custom > [class*="col-"] {
    padding-right: $grid-column-padding-custom;
    padding-left: $grid-column-padding-custom;
}

@for $i from 1 through $grid-columns {
    .row-cols-#{$i} {
        @include row-cols($i);
    }
}

@for $i from 1 through $grid-columns {
    .col-#{$i} {
        flex-basis: percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
    }
    .col-offset-#{$i} {
        margin-left: percentage($i / $grid-columns);
    }
}

// Between x-small and small breakpoints
@include x-small-breakpoint {
    // Auto-sized columns
    .col-sm {
        -ms-flex-preferred-size: 0;
        flex-basis: 0;
        -ms-flex-positive: 1;
        flex-grow: 1;
        min-width: 0;
        max-width: 100%;
    }

    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
        }
        .col-sm-offset-#{$i} {
            margin-left: percentage($i / $grid-columns);
        }
    }

    @for $i from 1 through $grid-columns {
        .row-cols-sm-#{$i} {
            @include row-cols($i);
        }
    }
}

// Between small and medium breakpoints
@include small-breakpoint {
    // Auto-sized columns
    .col-med {
        -ms-flex-preferred-size: 0;
        flex-basis: 0;
        -ms-flex-positive: 1;
        flex-grow: 1;
        min-width: 0;
        max-width: 100%;
    }

    @for $i from 1 through $grid-columns {
        .col-med-#{$i} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
        }
        .col-med-offset-#{$i} {
            margin-left: percentage($i / $grid-columns);
        }
    }

    @for $i from 1 through $grid-columns {
        .row-cols-med-#{$i} {
            @include row-cols($i);
        }
    }
}

// Between medium and large breakpoints
@include medium-breakpoint {
    // Auto-sized columns
    .col-lg {
        -ms-flex-preferred-size: 0;
        flex-basis: 0;
        -ms-flex-positive: 1;
        flex-grow: 1;
        min-width: 0;
        max-width: 100%;
    }

    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
        }
        .col-lg-offset-#{$i} {
            margin-left: percentage($i / $grid-columns);
        }
    }

    @for $i from 1 through $grid-columns {
        .row-cols-lg-#{$i} {
            @include row-cols($i);
        }
    }
}